JavaScript よく使う関数

## 文字列 String

string.length  長さ
string.indexOf() 検索(位置)
string.slice() 文字列の取り出し 
string.substring() 〇文字目から〇文字だけ取り出す
string.split() 分割
string.concat() 連結
string.trim() 両端から空白などを取り除く
string.startsWith() 指定文字列で始まるか
string.includes() 検索(含まれているか
string.toLowerCase() 小文字に変換
String.padStart() 結果の文字列が指定した長さになるように現在の文字列の先頭から適用されます。 d025.js

正規表現とは文字列内を検索したり置換するための強力な方法
## 正規表現を使えるメソッド(抜粋)
string.replace(変更前,変更後) 置き換え,削除  変更前の指定方法 例: /Dog/g
string.match() 正規表現に対する文字列の照合結果を受け取ります。 d089.js
string.search()
string.split()

よく使う正規表現
[A-Z] A~Zの間の１文字
\ 次の文字をエスケープ
^ 行の先頭にマッチ
$ 行の末尾にマッチ
* 直前文字0回以上の繰り返しにマッチ
+ 直前文字1回以上の繰り返しにマッチ
? 直前文字0回か1回の出現にマッチ
{n} 直前の文字をn回一致
\w 文字に一致
\d 数字に一致
\s 空白文字に一致
/g 値に一致
/i 大文字・小文字を区別しない検索
/gi 値に一致して大文字小文字を区別しない

## 配列 Array

array.length 長さ
array.join() 結合
array.unshift() 先頭に要素追加
array.push() 末尾に要素追加
array.shift() 先頭を取り除く
array.pop() 末尾を取り除く
array.splice() 一部を置き換え
array.concat() 連結
array.indexOf() 要素検索 何番目の要素か教えてくれる
array.sort()	ソート
array.flat() ネストされた配列を平らに
array.includes() 特定要素が含まれているか
array.forEach(callback) 各要素にcallback ※Objectには使えない
array.find(callback) 条件を満たした最初の配列を返す
array.map(value, index, callback) コールバックで新しい配列を生成  
value->配列の要素を一つずつ取り出す index->配列の順番 array->配列の内容
array.filter(callback) 条件を満たす新しい配列を生成
array.reduce(callback) 配列を累積(全部足したり)
{...array} 配列をオブジェクトに変換
array.fill() 開始位置（既定値は 0）から終了位置（既定値は array.length）までのすべての要素を、一定の値に変更します
array.length 配列の中の数を取得
array.some() 配列の中の少なくとも 1 つの要素が合格するかどうかを判定  true,falseで返す
array.every() 列内のすべての要素が指定された関数で実装されたテストに合格するかどうかを判定 true,falseで返す

## 連想配列 Map
 
new Map
map.set()
map.get()
map.has()
map.delete()
map.keys()
map.values()
map.forEach(callback)
map.keys(callback)
map.values(callback)
map.entries(callback)

## new Set 重複値を取り除く d165.js

## オブジェクト Object

object.entries)() オブジェクトを配列に変換

## 数字 Math

Math.floor() 切り捨て
与えられた数値以下の最大の整数を返します memo:Math.floor(null)は０を返す
~~x(ビット演算子) = Math.floor(x)と同等の結果を返す場合が多い(ただしxが正の数の場合)
Math.ceil() 切り上げ
Math.round() 四捨五入
Math.random() ランダム
Math.abs(-1) A. 1 絶対値を返す
Math.max(...arr) 配列の中の一番大きい数字を表示
Math.pow(数字,何乗)


###偶数と奇数  計算式
number % 2 == 0  偶数
number % 2 == 1  奇数

## データ
type of 値 // 値がどんなタイプか(文字列か、数値かなど)
値 instanceof オブジェクト

## ブラウザ操作
alert アラート
confirm 確認メッセージ
window.innerWidth 画面幅
window.innerHeight 画面高さ
location.href ページ移動
location.search クエリを取得
location.hash
history.back
history.forward
history.pushState SPAで使用
URLSearchParams クエリを取得

window.scrollX 横のスクロール量
window.scrollY 縦のスクロール量
scrollTo(X,Y) 指定座標までスクロール

## DOM

DOMはHTML文書をツリー構造として扱う

document.getElementById('#aaa')
document.querySelector('#aaa')
document.querySelectorAll('.box')

document.createElement('タグ名') タグを生成する

.appendChild(子ノード) ノード追加
.insertBefore()
.before()
.after()
.remove()

.textContent テキスト要素
.innerHTML HTML要素 //あまり使わない

要素.属性 = '' 属性操作
要素.setAttribute

要素.classList.add クラス操作
要素.classList.remove
要素.classList.toggle
要素.style.プロパティ名 // CSSで対応した方がいい

## イベント

addEventListener(イベント, callback, option)

よく使うイベント
click
change
input
focus /blur フォーカスされたり外れたり
keydown / keyup / keypress キー
mousedown / mouseup / mousemove マウスがのったり外れたり
mouseenter/ mouseleave / mouseover/mouseout

document.DOMContentLoaded DOM構築完了(こちらの方が早い)
window.load ページ読み込み完了 (画像読み込み後)

selectstart

touchstart / touchmove / touchend スマホ

タッチ情報.offsetX
event.changedTouches タッチの配列

dragstart  /drag / dragend ドラッグドロップ
dragenter/dragover/dragleave/drop

scroll スクロールされたら -> Intersection Observer API

addEventListener( e => {
  e.preventdefault() // デフォルト処理の停止
  e.stopPropagation() // イベントバブリングの停止
})


## フォーム

document.forms.(idかname)
インプット要素.value
インプット要素.files

ファイルは 
const reader = new FileReader()
reader.result //base64エンコード表示
reader.readAsDataUrl(image)

## 時間・処理のタイミング

setTimeout(callback, ms) 時間後
setInterval(callback, ms) 時間毎

## 例外

try{}catch( e ){}
throw new Error
## 非同期関係

new Promise(ok,ng)
Promiseインスタンス.then(callback)
Promiseインスタンス.catch(callback)
Promise.all(配列）

async function xxx(){
  await 関数名
}

fecth(url, options)

XMLHttpRequest 古い方法

## Parse

JSON.parse()
JSON.stringify()

encodeURI()
encodeURIComponent()

decodeURI()
decodeURIComponent()

## ESモジュール

export class名

import { class名} from './ファイル名':

## その他

new Worker() Web Workerのインスタンス生成

##三項演算子
condition ? exprIfTrue : exprIfFalse; 値が条件として使用される式 ? true : false;

##省略形にマッピング
const wordMapping = { 1: 'start', 2: 'end, ...};
wordMapping[1];

new RegExp テキストをパターンと照合するために使用
